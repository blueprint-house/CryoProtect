# CryoProtect v2 Logstash Pipeline Configuration

# Input section - Define sources
input {
  # TCP input for direct application logs
  tcp {
    port => 5000
    codec => json
    tags => ["cryoprotect", "app"]
  }
  
  # Filebeat input for log files
  beats {
    port => 5044
    tags => ["cryoprotect", "filebeat"]
  }
  
  # HTTP input for direct API logging
  http {
    port => 8080
    codec => json
    tags => ["cryoprotect", "api"]
  }
}

# Filter section - Process and enhance logs
filter {
  # Add timestamp if not present
  if ![timestamp] and [time] {
    date {
      match => [ "time", "ISO8601" ]
      target => "@timestamp"
      remove_field => [ "time" ]
    }
  }
  
  # Add timestamp if not present (alternative format)
  if ![timestamp] and ![time] and [datetime] {
    date {
      match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
      remove_field => [ "datetime" ]
    }
  }
  
  # Parse user agent if present
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_info"
    }
  }
  
  # Enhance logs with geoip data if IP address is present
  if [remote_addr] {
    geoip {
      source => "remote_addr"
      target => "geoip"
    }
  }
  
  # Add host metadata
  mutate {
    add_field => {
      "[@metadata][app]" => "cryoprotect"
      "[@metadata][environment]" => "${ENVIRONMENT:production}"
    }
  }
  
  # Categorize log events
  if [event_type] {
    mutate {
      add_field => { "[@metadata][event_type]" => "%{event_type}" }
    }
  } else if [tags] and [tags][0] {
    mutate {
      add_field => { "[@metadata][event_type]" => "%{[tags][0]}" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][event_type]" => "general" }
    }
  }
}

# Output section - Define destinations
output {
  # Send all logs to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "cryoprotect-%{[@metadata][environment]}-%{+YYYY.MM.dd}"
    document_type => "_doc"
    manage_template => false
    
    # Use different indices based on log type
    # This helps with organizing and querying logs
    index => "%{[@metadata][app]}-%{[@metadata][event_type]}-%{+YYYY.MM.dd}"
  }
  
  # Optional: Send critical errors to a separate index
  if [level] == "ERROR" or [level] == "CRITICAL" or [level] == "FATAL" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "cryoprotect-errors-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # Optional: Output to console for debugging
  if [loglevel] == "DEBUG" {
    stdout {
      codec => rubydebug
    }
  }
}