{
  "version": "1.0",
  "last_updated": "2025-04-15T15:10:00-06:00",
  "project_name": "CryoProtect v2",
  "description": "A tool for analyzing cryoprotectant molecules using RDKit and Supabase",
  "key_files": {
    "app.py": {
      "purpose": "Main Flask application entry point",
      "changes_made": "Fixed app variable definition before route declarations",
      "dependencies": ["config.py", "api/__init__.py", "api/utils.py"]
    },
    "api/rdkit_utils.py": {
      "purpose": "RDKit integration for molecular property calculations",
      "changes_made": "Fixed compatibility issues with RDKit 2023.9.1, specifically the missing fr_alcohol function",
      "key_functions": [
        "parse_molecule", 
        "calculate_hydrogen_bonding", 
        "calculate_logp", 
        "calculate_tpsa", 
        "calculate_molecular_properties", 
        "identify_functional_groups", 
        "estimate_permeability", 
        "calculate_all_properties", 
        "generate_molecule_svg", 
        "perform_substructure_search", 
        "calculate_similarity"
      ]
    },
    "docker-compose.yml": {
      "purpose": "Docker configuration for containerization",
      "services": ["cryoprotect"],
      "ports": ["5000:5000"],
      "volumes": [".:/app"]
    },
    "Dockerfile": {
      "purpose": "Docker image definition",
      "base_image": "continuumio/miniconda3:latest",
      "key_steps": [
        "Create conda environment from environment.yml",
        "Install pip requirements from requirements.txt",
        "Copy application code",
        "Set environment variables",
        "Run the application"
      ]
    },
    "environment.yml": {
      "purpose": "Conda environment definition",
      "python_version": "3.9",
      "key_dependencies": [
        "rdkit=2023.9.1",
        "pip=23.1.2",
        "ipython=8.12.0"
      ]
    },
    "requirements_updated.txt": {
      "purpose": "Pip requirements for the application",
      "key_dependencies": [
        "Flask==2.3.3",
        "Flask-RESTful==0.3.10",
        "Flask-Cors==4.0.0",
        "flask-apispec==0.11.4",
        "apispec==6.3.0",
        "marshmallow==3.20.1",
        "supabase==2.0.3",
        "python-dotenv==1.0.0"
      ]
    },
    ".env": {
      "purpose": "Environment variables for the application",
      "contains": [
        "Supabase URL and key",
        "Supabase user credentials",
        "PubChem API settings"
      ]
    },
    "migrations/001_initial_schema.sql": {
      "purpose": "Initial database schema for Supabase",
      "key_tables": [
        "molecules",
        "property_types",
        "molecular_properties",
        "mixtures",
        "mixture_components",
        "calculation_methods",
        "predictions",
        "experiments"
      ]
    },
    "verify_rdkit.py": {
      "purpose": "Verification script for RDKit integration",
      "tests": [
        "RDKit import",
        "Molecule parsing",
        "Property calculation",
        "Visualization",
        "Substructure search",
        "Similarity calculation"
      ]
    }
  },
  "directory_structure": {
    "api/": "API code and RDKit integration",
    "migrations/": "Database migration scripts",
    "static/": "Static assets for the web interface",
    "templates/": "HTML templates for the web interface",
    "examples/": "Example code for using the API",
    "tests/": "Test scripts",
    "memory-bank/": "RooFlow Universal Memory Bank"
  },
  "completed_tasks": [
    {
      "task": "Fix RDKit compatibility issues",
      "description": "Updated rdkit_utils.py to work with RDKit 2023.9.1",
      "date": "2025-04-15"
    },
    {
      "task": "Fix Flask application",
      "description": "Fixed app.py to properly define the Flask app before adding routes",
      "date": "2025-04-15"
    },
    {
      "task": "Set up Git repository",
      "description": "Initialized Git repository, added .gitignore, and committed all files",
      "date": "2025-04-15"
    },
    {
      "task": "Create memory-bank directory",
      "description": "Added memory-bank directory for RooFlow UMB",
      "date": "2025-04-15"
    },
    {
      "task": "Verify Docker container",
      "description": "Built and ran Docker container, verified Flask application works",
      "date": "2025-04-15"
    }
  ],
  "pending_tasks": [
    {
      "task": "Apply database migrations",
      "description": "Apply migrations to Supabase database",
      "prerequisites": ["Supabase CLI installation"]
    },
    {
      "task": "Push to GitHub",
      "description": "Create GitHub repository and push code",
      "prerequisites": ["GitHub account setup"]
    },
    {
      "task": "Fix security vulnerabilities",
      "description": "Address CVEs in Docker container",
      "prerequisites": ["Docker security scanning"]
    },
    {
      "task": "Fix JavaScript errors",
      "description": "Address 'Invalid left-hand side in assignment' error in web interface",
      "prerequisites": ["JavaScript debugging"]
    }
  ],
  "api_endpoints": {
    "/health": {
      "method": "GET",
      "description": "Health check endpoint",
      "response": {
        "status": "ok",
        "version": "v1"
      }
    },
    "/": {
      "method": "GET",
      "description": "Web interface dashboard",
      "response": "HTML page"
    },
    "/molecules": {
      "method": "GET",
      "description": "Molecules page",
      "response": "HTML page"
    },
    "/mixtures": {
      "method": "GET",
      "description": "Mixtures page",
      "response": "HTML page"
    },
    "/predictions": {
      "method": "GET",
      "description": "Predictions page",
      "response": "HTML page"
    },
    "/experiments": {
      "method": "GET",
      "description": "Experiments page",
      "response": "HTML page"
    },
    "/comparisons": {
      "method": "GET",
      "description": "Comparisons page",
      "response": "HTML page"
    },
    "/login": {
      "method": "GET",
      "description": "Login page",
      "response": "HTML page"
    },
    "/auth/login": {
      "method": "POST",
      "description": "Authentication endpoint",
      "response": {
        "message": "Authentication successful",
        "user": {
          "id": "user_id",
          "email": "user_email"
        }
      }
    }
  }
}