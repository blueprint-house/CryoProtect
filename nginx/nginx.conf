# NGINX configuration for blue/green deployment
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format with request timing and upstream info
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$request_time $upstream_response_time $upstream_addr';

    access_log /var/log/nginx/access.log detailed;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    
    # Gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/plain
        text/xml;

    # Upstream servers for blue environment with health checks
    upstream blue {
        server cryoprotect-blue:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Upstream servers for green environment with health checks
    upstream green {
        server cryoprotect-green:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Active deployment environment (blue or green)
    # This file will be updated by the deployment script
    include /etc/nginx/conf.d/active.conf;

    # Health check server
    server {
        listen 8080;
        server_name localhost;

        # NGINX internal health check
        location = /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","component":"nginx","timestamp":"$time_iso8601"}';
        }
        
        # Comprehensive health check dashboard
        location /health/dashboard {
            auth_basic "Health Check Dashboard";
            auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
            
            add_header Content-Type text/html;
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>CryoProtect Health Dashboard</title>
    <meta http-equiv="refresh" content="30">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        .status { margin: 20px 0; padding: 10px; border-radius: 5px; }
        .healthy { background-color: #dff0d8; border: 1px solid #d6e9c6; }
        .unhealthy { background-color: #f2dede; border: 1px solid #ebccd1; }
        .service { margin: 10px 0; padding: 10px; background-color: #f5f5f5; border-radius: 5px; }
        .timestamp { color: #777; font-size: 0.8em; }
    </style>
    <script>
        window.onload = function() {
            fetchHealth("/health/blue", "blue-status");
            fetchHealth("/health/green", "green-status");
            fetchHealth("/active", "active-status");
            
            function fetchHealth(url, elementId) {
                fetch(url)
                    .then(response => {
                        const element = document.getElementById(elementId);
                        if (response.ok) {
                            element.className = "status healthy";
                            return response.text().then(text => {
                                element.innerHTML = "<h3>Healthy</h3><pre>" + text + "</pre>";
                            });
                        } else {
                            element.className = "status unhealthy";
                            element.innerHTML = "<h3>Unhealthy</h3><p>Status: " + response.status + "</p>";
                        }
                    })
                    .catch(error => {
                        const element = document.getElementById(elementId);
                        element.className = "status unhealthy";
                        element.innerHTML = "<h3>Error</h3><p>" + error.message + "</p>";
                    });
            }
        };
    </script>
</head>
<body>
    <h1>CryoProtect Health Dashboard</h1>
    <p class="timestamp">Last updated: ' + $time_local + '</p>
    
    <h2>Blue Environment</h2>
    <div id="blue-status" class="status">Loading...</div>
    
    <h2>Green Environment</h2>
    <div id="green-status" class="status">Loading...</div>
    
    <h2>Active Environment</h2>
    <div id="active-status" class="status">Loading...</div>
</body>
</html>';
        }

        # Blue environment health status
        location /health/blue {
            proxy_pass http://blue/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @blue_down;
            access_log off;
        }
        
        # Blue environment liveness probe
        location /health/blue/liveness {
            proxy_pass http://blue/health/liveness;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @blue_down;
            access_log off;
        }
        
        # Blue environment readiness probe
        location /health/blue/readiness {
            proxy_pass http://blue/health/readiness;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @blue_down;
            access_log off;
        }

        location @blue_down {
            return 503 "Blue environment is down";
        }

        # Green environment health status
        location /health/green {
            proxy_pass http://green/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @green_down;
            access_log off;
        }
        
        # Green environment liveness probe
        location /health/green/liveness {
            proxy_pass http://green/health/liveness;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @green_down;
            access_log off;
        }
        
        # Green environment readiness probe
        location /health/green/readiness {
            proxy_pass http://green/health/readiness;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_intercept_errors on;
            error_page 502 503 504 = @green_down;
            access_log off;
        }

        location @green_down {
            return 503 "Green environment is down";
        }

        # Current active environment
        location /active {
            alias /etc/nginx/conf.d/;
            try_files active.conf =404;
        }
    }

    # Security headers
    map $sent_http_content_type $security_headers {
        default                        "frame-ancestors 'none'; default-src 'self'; script-src 'self'; object-src 'none'; upgrade-insecure-requests;";
        ~*text/html                    "frame-ancestors 'none'; default-src 'self'; script-src 'self'; object-src 'none'; upgrade-insecure-requests;";
        ~*application/json             "frame-ancestors 'none'; default-src 'self'; script-src 'self'; object-src 'none'; upgrade-insecure-requests;";
    }

    # Add security headers to all responses
    add_header Content-Security-Policy $security_headers always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
}