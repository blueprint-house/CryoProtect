#!/usr/bin/env python3
"""
review_vulnerability_results.py - Review and remediate vulnerability scan results

This script helps review and track the remediation of vulnerabilities found in security scans.
It can generate reports, track progress, and help prioritize remediation efforts.

Usage:
    python review_vulnerability_results.py [options]

Options:
    --scan-dir DIR        Directory containing scan results (default: ./security/reports)
    --output FILE         Output report file (default: ./security/remediation_report.md)
    --format FORMAT       Output format (markdown, html, json) (default: markdown)
    --threshold CVSS      CVSS threshold for critical vulnerabilities (default: 7.0)
    --update              Update existing remediation status
    --help                Show this help message and exit
"""

import argparse
import glob
import json
import os
import sys
import re
from datetime import datetime
import xml.etree.ElementTree as ET
from collections import defaultdict


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Review and remediate vulnerability scan results")
    parser.add_argument("--scan-dir", default="./security/reports",
                        help="Directory containing scan results (default: ./security/reports)")
    parser.add_argument("--output", default="./security/remediation_report.md",
                        help="Output report file (default: ./security/remediation_report.md)")
    parser.add_argument("--format", default="markdown", choices=["markdown", "html", "json"],
                        help="Output format (markdown, html, json) (default: markdown)")
    parser.add_argument("--threshold", type=float, default=7.0,
                        help="CVSS threshold for critical vulnerabilities (default: 7.0)")
    parser.add_argument("--update", action="store_true",
                        help="Update existing remediation status")
    return parser.parse_args()


def find_scan_files(scan_dir):
    """Find all scan result files in the specified directory."""
    scan_files = {
        "bandit": sorted(glob.glob(os.path.join(scan_dir, "bandit_*.json"))),
        "safety": sorted(glob.glob(os.path.join(scan_dir, "safety_*.json"))),
        "eslint": sorted(glob.glob(os.path.join(scan_dir, "eslint_*.json"))),
        "dependency-check": sorted(glob.glob(os.path.join(scan_dir, "dependency-check", "*.json")))
    }
    return scan_files


def load_existing_remediation(output_file):
    """Load existing remediation status from the output file."""
    remediation_status = {}
    
    if not os.path.exists(output_file):
        return remediation_status
    
    if output_file.endswith(".json"):
        try:
            with open(output_file, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            return remediation_status
    
    # For markdown/html files, parse the remediation status
    try:
        with open(output_file, 'r') as f:
            content = f.read()
            
        # Extract vulnerability IDs and their status
        pattern = r"\|\s*([A-Za-z0-9\-_]+)\s*\|\s*([^\|]+)\s*\|\s*([^\|]+)\s*\|\s*([^\|]+)\s*\|\s*([^\|]+)\s*\|"
        matches = re.findall(pattern, content)
        
        for match in matches:
            vuln_id, description, severity, status, notes = match
            vuln_id = vuln_id.strip()
            status = status.strip()
            notes = notes.strip()
            
            if vuln_id and vuln_id != "ID" and status:  # Skip header row
                remediation_status[vuln_id] = {
                    "status": status,
                    "notes": notes
                }
    except IOError:
        pass
    
    return remediation_status


def parse_bandit_results(file_path):
    """Parse Bandit scan results."""
    vulnerabilities = []
    
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        for result in data.get("results", []):
            vuln_id = f"BANDIT-{result.get('test_id', 'UNKNOWN')}"
            severity = result.get("issue_severity", "UNKNOWN")
            confidence = result.get("issue_confidence", "UNKNOWN")
            
            # Map severity to CVSS-like score
            severity_score = {
                "HIGH": 8.0,
                "MEDIUM": 5.0,
                "LOW": 3.0,
                "UNKNOWN": 1.0
            }.get(severity, 1.0)
            
            vulnerabilities.append({
                "id": vuln_id,
                "source": "bandit",
                "file": result.get("filename", "UNKNOWN"),
                "line": result.get("line_number", 0),
                "description": result.get("issue_text", "UNKNOWN"),
                "severity": severity,
                "confidence": confidence,
                "cvss_score": severity_score,
                "remediation": "Review and fix the identified security issue."
            })
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error parsing Bandit results from {file_path}: {e}")
    
    return vulnerabilities
def parse_safety_results(file_path):
    """Parse Safety scan results."""
    vulnerabilities = []
    
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        for vuln in data:
            package_name = vuln.get("package_name", "UNKNOWN")
            vuln_id = vuln.get("vulnerability_id", "UNKNOWN")
            vuln_id = f"SAFETY-{vuln_id}"
            
            # Try to extract severity from advisory
            advisory = vuln.get("advisory", "")
            severity = "UNKNOWN"
            severity_score = 5.0  # Default medium
            
            if "critical" in advisory.lower():
                severity = "CRITICAL"
                severity_score = 9.0
            elif "high" in advisory.lower():
                severity = "HIGH"
                severity_score = 7.0
            elif "medium" in advisory.lower():
                severity = "MEDIUM"
                severity_score = 5.0
            elif "low" in advisory.lower():
                severity = "LOW"
                severity_score = 3.0
            
            vulnerabilities.append({
                "id": vuln_id,
                "source": "safety",
                "package": package_name,
                "installed_version": vuln.get("installed_version", "UNKNOWN"),
                "affected_versions": vuln.get("vulnerable_spec", "UNKNOWN"),
                "description": advisory,
                "severity": severity,
                "cvss_score": severity_score,
                "remediation": f"Update {package_name} to a non-vulnerable version."
            })
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error parsing Safety results from {file_path}: {e}")
    
    return vulnerabilities


def parse_eslint_results(file_path):
    """Parse ESLint security scan results."""
    vulnerabilities = []
    
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        for result in data:
            file_path = result.get("filePath", "UNKNOWN")
            
            for message in result.get("messages", []):
                rule_id = message.get("ruleId", "UNKNOWN")
                
                # Only include security-related rules
                if not (rule_id.startswith("security/") or rule_id.startswith("no-unsanitized/")):
                    continue
                
                vuln_id = f"ESLINT-{rule_id.replace('/', '-')}"
                severity = "HIGH" if message.get("severity") == 2 else "MEDIUM"
                
                # Map severity to CVSS-like score
                severity_score = 7.5 if severity == "HIGH" else 5.0
                
                vulnerabilities.append({
                    "id": vuln_id,
                    "source": "eslint",
                    "file": file_path,
                    "line": message.get("line", 0),
                    "column": message.get("column", 0),
                    "description": message.get("message", "UNKNOWN"),
                    "severity": severity,
                    "cvss_score": severity_score,
                    "remediation": "Review and fix the identified security issue."
                })
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error parsing ESLint results from {file_path}: {e}")
    
    return vulnerabilities


def parse_dependency_check_results(file_path):
    """Parse OWASP Dependency-Check scan results."""
    vulnerabilities = []
    
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        for dependency in data.get("dependencies", []):
            if not dependency.get("vulnerabilities"):
                continue
            
            component = dependency.get("fileName", "UNKNOWN")
            
            for vuln in dependency.get("vulnerabilities", []):
                vuln_id = vuln.get("name", "UNKNOWN")
                
                # Get CVSS score
                cvss_score = 5.0  # Default medium
                if vuln.get("cvssv3"):
                    cvss_score = float(vuln.get("cvssv3", {}).get("baseScore", 5.0))
                elif vuln.get("cvssv2"):
                    cvss_score = float(vuln.get("cvssv2", {}).get("score", 5.0))
                
                # Determine severity based on CVSS score
                severity = "MEDIUM"
                if cvss_score >= 9.0:
                    severity = "CRITICAL"
                elif cvss_score >= 7.0:
                    severity = "HIGH"
                elif cvss_score >= 4.0:
                    severity = "MEDIUM"
                else:
                    severity = "LOW"
                
                vulnerabilities.append({
                    "id": f"OWASP-{vuln_id}",
                    "source": "dependency-check",
                    "component": component,
                    "description": vuln.get("description", "UNKNOWN"),
                    "severity": severity,
                    "cvss_score": cvss_score,
                    "cve": vuln_id,
                    "remediation": vuln.get("recommendation", "Update to a non-vulnerable version.")
                })
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error parsing Dependency-Check results from {file_path}: {e}")
    
    return vulnerabilities
def generate_markdown_report(vulnerabilities, remediation_status, threshold):
    """Generate a Markdown report of vulnerabilities."""
    report = []
    
    # Add report header
    report.append("# Vulnerability Remediation Report")
    report.append(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append("")
    
    # Add summary
    total_vulns = len(vulnerabilities)
    critical_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] >= threshold)
    high_vulns = sum(1 for v in vulnerabilities if 7.0 <= v["cvss_score"] < threshold)
    medium_vulns = sum(1 for v in vulnerabilities if 4.0 <= v["cvss_score"] < 7.0)
    low_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] < 4.0)
    
    report.append("## Summary")
    report.append("")
    report.append(f"- Total vulnerabilities: {total_vulns}")
    report.append(f"- Critical vulnerabilities: {critical_vulns}")
    report.append(f"- High vulnerabilities: {high_vulns}")
    report.append(f"- Medium vulnerabilities: {medium_vulns}")
    report.append(f"- Low vulnerabilities: {low_vulns}")
    report.append("")
    
    # Add remediation status summary
    remediated = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "Remediated")
    in_progress = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "In Progress")
    not_started = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") in [None, "Not Started"])
    false_positive = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "False Positive")
    
    report.append("## Remediation Status")
    report.append("")
    if total_vulns > 0:
        report.append(f"- Remediated: {remediated} ({remediated/total_vulns*100:.1f}%)")
        report.append(f"- In Progress: {in_progress} ({in_progress/total_vulns*100:.1f}%)")
        report.append(f"- Not Started: {not_started} ({not_started/total_vulns*100:.1f}%)")
        report.append(f"- False Positive: {false_positive} ({false_positive/total_vulns*100:.1f}%)")
    else:
        report.append("- No vulnerabilities found.")
    report.append("")
    
    # Add critical vulnerabilities section
    report.append("## Critical Vulnerabilities")
    report.append("")
    report.append("| ID | Description | Severity | Status | Notes |")
    report.append("| --- | --- | --- | --- | --- |")
    
    for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
        if vuln["cvss_score"] >= threshold:
            status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
            notes = remediation_status.get(vuln["id"], {}).get("notes", "")
            
            report.append(f"| {vuln['id']} | {vuln['description']} | {vuln['severity']} | {status} | {notes} |")
    
    report.append("")
    
    # Add high vulnerabilities section
    report.append("## High Vulnerabilities")
    report.append("")
    report.append("| ID | Description | Severity | Status | Notes |")
    report.append("| --- | --- | --- | --- | --- |")
    
    for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
        if 7.0 <= vuln["cvss_score"] < threshold:
            status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
            notes = remediation_status.get(vuln["id"], {}).get("notes", "")
            
            report.append(f"| {vuln['id']} | {vuln['description']} | {vuln['severity']} | {status} | {notes} |")
    
    report.append("")
    
    # Add medium vulnerabilities section
    report.append("## Medium Vulnerabilities")
    report.append("")
    report.append("| ID | Description | Severity | Status | Notes |")
    report.append("| --- | --- | --- | --- | --- |")
    
    for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
        if 4.0 <= vuln["cvss_score"] < 7.0:
            status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
            notes = remediation_status.get(vuln["id"], {}).get("notes", "")
            
            report.append(f"| {vuln['id']} | {vuln['description']} | {vuln['severity']} | {status} | {notes} |")
    
    report.append("")
    
    # Add low vulnerabilities section
    report.append("## Low Vulnerabilities")
    report.append("")
    report.append("| ID | Description | Severity | Status | Notes |")
    report.append("| --- | --- | --- | --- | --- |")
    
    for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
        if vuln["cvss_score"] < 4.0:
            status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
            notes = remediation_status.get(vuln["id"], {}).get("notes", "")
            
            report.append(f"| {vuln['id']} | {vuln['description']} | {vuln['severity']} | {status} | {notes} |")
    
    report.append("")
    
    # Add remediation instructions
    report.append("## Remediation Instructions")
    report.append("")
    report.append("To update the remediation status of vulnerabilities:")
    report.append("")
    report.append("1. Edit this file and update the 'Status' column with one of the following values:")
    report.append("   - Not Started")
    report.append("   - In Progress")
    report.append("   - Remediated")
    report.append("   - False Positive")
    report.append("   - Accepted Risk")
    report.append("")
    report.append("2. Add notes in the 'Notes' column to provide context or justification.")
    report.append("")
    report.append("3. Run the review script with the --update flag to update the remediation status:")
    report.append("   ```")
    report.append("   python security/review_vulnerability_results.py --update")
    report.append("   ```")
    
    return "\n".join(report)


def generate_json_report(vulnerabilities, remediation_status, threshold):
    """Generate a JSON report of vulnerabilities."""
    # Add summary
    total_vulns = len(vulnerabilities)
    critical_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] >= threshold)
    high_vulns = sum(1 for v in vulnerabilities if 7.0 <= v["cvss_score"] < threshold)
    medium_vulns = sum(1 for v in vulnerabilities if 4.0 <= v["cvss_score"] < 7.0)
    low_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] < 4.0)
    
    # Add remediation status summary
    remediated = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "Remediated")
    in_progress = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "In Progress")
    not_started = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") in [None, "Not Started"])
    false_positive = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "False Positive")
    
    # Create report structure
    report = {
        "generated_at": datetime.now().isoformat(),
        "summary": {
            "total": total_vulns,
            "critical": critical_vulns,
            "high": high_vulns,
            "medium": medium_vulns,
            "low": low_vulns
        },
        "remediation_status": {
            "remediated": remediated,
            "in_progress": in_progress,
            "not_started": not_started,
            "false_positive": false_positive
        },
        "vulnerabilities": []
    }
    
    # Add vulnerabilities
    for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
        status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
        notes = remediation_status.get(vuln["id"], {}).get("notes", "")
        
        vuln_data = {
            "id": vuln["id"],
            "source": vuln["source"],
            "description": vuln["description"],
            "severity": vuln["severity"],
            "cvss_score": vuln["cvss_score"],
            "remediation": vuln["remediation"],
            "status": status,
            "notes": notes
        }
        
        # Add additional fields based on source
        if vuln["source"] == "bandit":
            vuln_data["file"] = vuln["file"]
            vuln_data["line"] = vuln["line"]
            vuln_data["confidence"] = vuln["confidence"]
        elif vuln["source"] == "safety":
            vuln_data["package"] = vuln["package"]
            vuln_data["installed_version"] = vuln["installed_version"]
            vuln_data["affected_versions"] = vuln["affected_versions"]
        elif vuln["source"] == "eslint":
            vuln_data["file"] = vuln["file"]
            vuln_data["line"] = vuln["line"]
            vuln_data["column"] = vuln["column"]
        elif vuln["source"] == "dependency-check":
            vuln_data["component"] = vuln["component"]
            vuln_data["cve"] = vuln["cve"]
        
        report["vulnerabilities"].append(vuln_data)
    
    return json.dumps(report, indent=2)
def main():
    """Main function."""
    args = parse_args()
    
    # Find scan files
    scan_files = find_scan_files(args.scan_dir)
    
    # Load existing remediation status if updating
    remediation_status = load_existing_remediation(args.output) if args.update else {}
    
    # Parse scan results
    vulnerabilities = []
    
    # Parse Bandit results
    for file_path in scan_files["bandit"]:
        vulnerabilities.extend(parse_bandit_results(file_path))
    
    # Parse Safety results
    for file_path in scan_files["safety"]:
        vulnerabilities.extend(parse_safety_results(file_path))
    
    # Parse ESLint results
    for file_path in scan_files["eslint"]:
        vulnerabilities.extend(parse_eslint_results(file_path))
    
    # Parse Dependency-Check results
    for file_path in scan_files["dependency-check"]:
        vulnerabilities.extend(parse_dependency_check_results(file_path))
    
    # Generate report
    if args.format == "markdown":
        report = generate_markdown_report(vulnerabilities, remediation_status, args.threshold)
    elif args.format == "html":
        report = generate_html_report(vulnerabilities, remediation_status, args.threshold)
    elif args.format == "json":
        report = generate_json_report(vulnerabilities, remediation_status, args.threshold)
    
    # Write report to file
    os.makedirs(os.path.dirname(os.path.abspath(args.output)), exist_ok=True)
    with open(args.output, 'w') as f:
        f.write(report)
    
    print(f"Vulnerability report generated: {args.output}")
    print(f"Total vulnerabilities found: {len(vulnerabilities)}")
    
    # Print summary
    critical_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] >= args.threshold)
    high_vulns = sum(1 for v in vulnerabilities if 7.0 <= v["cvss_score"] < args.threshold)
    medium_vulns = sum(1 for v in vulnerabilities if 4.0 <= v["cvss_score"] < 7.0)
    low_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] < 4.0)
    
    print(f"Critical vulnerabilities: {critical_vulns}")
    print(f"High vulnerabilities: {high_vulns}")
    print(f"Medium vulnerabilities: {medium_vulns}")
    print(f"Low vulnerabilities: {low_vulns}")


def generate_html_report(vulnerabilities, remediation_status, threshold):
    """Generate an HTML report of vulnerabilities."""
    html = []
    
    # Add HTML header
    html.append("<!DOCTYPE html>")
    html.append("<html lang=\"en\">")
    html.append("<head>")
    html.append("  <meta charset=\"UTF-8\">")
    html.append("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">")
    html.append("  <title>Vulnerability Remediation Report</title>")
    html.append("  <style>")
    html.append("    body { font-family: Arial, sans-serif; margin: 20px; }")
    html.append("    h1 { color: #2c3e50; }")
    html.append("    h2 { color: #3498db; margin-top: 30px; }")
    html.append("    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }")
    html.append("    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }")
    html.append("    th { background-color: #f2f2f2; }")
    html.append("    tr:nth-child(even) { background-color: #f9f9f9; }")
    html.append("    .critical { background-color: #ffdddd; }")
    html.append("    .high { background-color: #ffffcc; }")
    html.append("    .medium { background-color: #e6f3ff; }")
    html.append("    .low { background-color: #eafaea; }")
    html.append("    .remediated { color: green; }")
    html.append("    .in-progress { color: orange; }")
    html.append("    .not-started { color: red; }")
    html.append("    .false-positive { color: gray; }")
    html.append("  </style>")
    html.append("</head>")
    html.append("<body>")
    
    # Add report header
    html.append("  <h1>Vulnerability Remediation Report</h1>")
    html.append(f"  <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
    
    # Add summary
    total_vulns = len(vulnerabilities)
    critical_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] >= threshold)
    high_vulns = sum(1 for v in vulnerabilities if 7.0 <= v["cvss_score"] < threshold)
    medium_vulns = sum(1 for v in vulnerabilities if 4.0 <= v["cvss_score"] < 7.0)
    low_vulns = sum(1 for v in vulnerabilities if v["cvss_score"] < 4.0)
    
    html.append("  <h2>Summary</h2>")
    html.append("  <ul>")
    html.append(f"    <li>Total vulnerabilities: {total_vulns}</li>")
    html.append(f"    <li>Critical vulnerabilities: {critical_vulns}</li>")
    html.append(f"    <li>High vulnerabilities: {high_vulns}</li>")
    html.append(f"    <li>Medium vulnerabilities: {medium_vulns}</li>")
    html.append(f"    <li>Low vulnerabilities: {low_vulns}</li>")
    html.append("  </ul>")
    
    # Add remediation status summary
    remediated = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "Remediated")
    in_progress = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "In Progress")
    not_started = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") in [None, "Not Started"])
    false_positive = sum(1 for v in vulnerabilities if remediation_status.get(v["id"], {}).get("status") == "False Positive")
    
    html.append("  <h2>Remediation Status</h2>")
    html.append("  <ul>")
    if total_vulns > 0:
        html.append(f"    <li>Remediated: {remediated} ({remediated/total_vulns*100:.1f}%)</li>")
        html.append(f"    <li>In Progress: {in_progress} ({in_progress/total_vulns*100:.1f}%)</li>")
        html.append(f"    <li>Not Started: {not_started} ({not_started/total_vulns*100:.1f}%)</li>")
        html.append(f"    <li>False Positive: {false_positive} ({false_positive/total_vulns*100:.1f}%)</li>")
    else:
        html.append("    <li>No vulnerabilities found.</li>")
    html.append("  </ul>")
    
    # Add vulnerability sections
    for section, min_score, max_score, css_class in [
        ("Critical", threshold, float('inf'), "critical"),
        ("High", 7.0, threshold, "high"),
        ("Medium", 4.0, 7.0, "medium"),
        ("Low", 0.0, 4.0, "low")
    ]:
        html.append(f"  <h2>{section} Vulnerabilities</h2>")
        html.append("  <table>")
        html.append("    <tr>")
        html.append("      <th>ID</th>")
        html.append("      <th>Description</th>")
        html.append("      <th>Severity</th>")
        html.append("      <th>Status</th>")
        html.append("      <th>Notes</th>")
        html.append("    </tr>")
        
        for vuln in sorted(vulnerabilities, key=lambda v: v["cvss_score"], reverse=True):
            if min_score <= vuln["cvss_score"] < max_score:
                status = remediation_status.get(vuln["id"], {}).get("status", "Not Started")
                notes = remediation_status.get(vuln["id"], {}).get("notes", "")
                
                status_class = status.lower().replace(" ", "-")
                
                html.append(f"    <tr class=\"{css_class}\">")
                html.append(f"      <td>{vuln['id']}</td>")
                html.append(f"      <td>{vuln['description']}</td>")
                html.append(f"      <td>{vuln['severity']}</td>")
                html.append(f"      <td class=\"{status_class}\">{status}</td>")
                html.append(f"      <td>{notes}</td>")
                html.append(f"    </tr>")
        
        html.append("  </table>")
    
    # Add remediation instructions
    html.append("  <h2>Remediation Instructions</h2>")
    html.append("  <p>To update the remediation status of vulnerabilities:</p>")
    html.append("  <ol>")
    html.append("    <li>Edit the remediation report and update the 'Status' column with one of the following values:")
    html.append("      <ul>")
    html.append("        <li>Not Started</li>")
    html.append("        <li>In Progress</li>")
    html.append("        <li>Remediated</li>")
    html.append("        <li>False Positive</li>")
    html.append("        <li>Accepted Risk</li>")
    html.append("      </ul>")
    html.append("    </li>")
    html.append("    <li>Add notes in the 'Notes' column to provide context or justification.</li>")
    html.append("    <li>Run the review script with the --update flag to update the remediation status:")
    html.append("      <pre>python security/review_vulnerability_results.py --update</pre>")
    html.append("    </li>")
    html.append("  </ol>")
    
    html.append("</body>")
    html.append("</html>")
    
    return "\n".join(html)


if __name__ == "__main__":
    main()