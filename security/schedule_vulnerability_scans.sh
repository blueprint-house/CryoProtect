#!/bin/bash
# schedule_vulnerability_scans.sh - Schedule and run vulnerability scans
# 
# This script sets up scheduled vulnerability scans using cron and provides
# a way to run scans on demand. It integrates all security scanning tools
# and can send alerts when vulnerabilities are found.
#
# Usage: ./schedule_vulnerability_scans.sh [options]
#
# Options:
#   --install             Install and configure scheduled scans
#   --run                 Run all vulnerability scans now
#   --daily               Run daily scans
#   --weekly              Run weekly scans
#   --alert-email EMAIL   Email address for alerts
#   --alert-slack URL     Slack webhook URL for alerts
#   --help                Show this help message and exit

set -e

# Default values
INSTALL_MODE=false
RUN_MODE=false
DAILY_MODE=false
WEEKLY_MODE=false
ALERT_EMAIL=""
ALERT_SLACK=""
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
REPORT_DIR="$PROJECT_DIR/security/reports"
LOG_DIR="$PROJECT_DIR/security/logs"

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --install)
      INSTALL_MODE=true
      shift
      ;;
    --run)
      RUN_MODE=true
      shift
      ;;
    --daily)
      DAILY_MODE=true
      shift
      ;;
    --weekly)
      WEEKLY_MODE=true
      shift
      ;;
    --alert-email)
      ALERT_EMAIL="$2"
      shift 2
      ;;
    --alert-slack)
      ALERT_SLACK="$2"
      shift 2
      ;;
    --help)
      echo "Usage: ./schedule_vulnerability_scans.sh [options]"
      echo ""
      echo "Options:"
      echo "  --install             Install and configure scheduled scans"
      echo "  --run                 Run all vulnerability scans now"
      echo "  --daily               Run daily scans"
      echo "  --weekly              Run weekly scans"
      echo "  --alert-email EMAIL   Email address for alerts"
      echo "  --alert-slack URL     Slack webhook URL for alerts"
      echo "  --help                Show this help message and exit"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Run './schedule_vulnerability_scans.sh --help' for usage information"
      exit 1
      ;;
  esac
done

# Create directories if they don't exist
mkdir -p "$REPORT_DIR"
mkdir -p "$LOG_DIR"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to install dependencies
install_dependencies() {
  echo "Checking and installing dependencies..."
  
  # Check for Python
  if ! command_exists python3; then
    echo "Python 3 is required but not installed. Please install Python 3."
    exit 1
  fi
  
  # Check for pip and install if needed
  if ! command_exists pip3; then
    echo "Installing pip..."
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py
    rm get-pip.py
  fi
  
  # Install Python dependencies
  echo "Installing Python security tools..."
  pip3 install bandit safety
  
  # Check for Node.js and npm
  if command_exists node && command_exists npm; then
    echo "Installing Node.js security tools..."
    npm install --save-dev eslint eslint-plugin-security eslint-plugin-no-unsanitized
  else
    echo "Node.js and npm are not installed. JavaScript security scanning will be skipped."
  fi
  
  # Check for Docker (for OWASP Dependency-Check)
  if ! command_exists docker; then
    echo "Docker is not installed. OWASP Dependency-Check will use local installation if available."
  fi
  
  echo "Dependencies installation completed."
}

# Function to install cron jobs
install_cron_jobs() {
  echo "Setting up scheduled vulnerability scans..."
  
  # Create the cron job script
  CRON_SCRIPT="$SCRIPT_DIR/run_vulnerability_scans.sh"
  
  cat > "$CRON_SCRIPT" << EOF
#!/bin/bash
# This script is automatically generated by schedule_vulnerability_scans.sh
# Do not edit directly

# Set environment variables
export PATH=\$PATH:/usr/local/bin
export SCRIPT_DIR="$SCRIPT_DIR"
export PROJECT_DIR="$PROJECT_DIR"
export REPORT_DIR="$REPORT_DIR"
export LOG_DIR="$LOG_DIR"
export ALERT_EMAIL="$ALERT_EMAIL"
export ALERT_SLACK="$ALERT_SLACK"

# Create timestamp
TIMESTAMP=\$(date -u +"%Y%m%d%H%M%S")
LOG_FILE="\$LOG_DIR/vulnerability_scan_\$TIMESTAMP.log"

# Function to send alerts
send_alert() {
  SUBJECT="\$1"
  MESSAGE="\$2"
  
  # Send email alert if configured
  if [ -n "\$ALERT_EMAIL" ]; then
    echo "\$MESSAGE" | mail -s "\$SUBJECT" "\$ALERT_EMAIL"
  fi
  
  # Send Slack alert if configured
  if [ -n "\$ALERT_SLACK" ]; then
    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"\$SUBJECT\\\n\$MESSAGE\"}" "\$ALERT_SLACK"
  fi
}

# Run scans based on scan type
run_scans() {
  SCAN_TYPE="\$1"
  echo "Running \$SCAN_TYPE vulnerability scans at \$(date)" | tee -a "\$LOG_FILE"
  
  # Run Python Bandit scan
  echo "Running Bandit scan..." | tee -a "\$LOG_FILE"
  python3 "\$SCRIPT_DIR/scan_python_bandit.py" --path "\$PROJECT_DIR" --format json --output "\$REPORT_DIR/bandit_\$TIMESTAMP.json" 2>&1 | tee -a "\$LOG_FILE"
  
  # Run Python Safety scan
  echo "Running Safety scan..." | tee -a "\$LOG_FILE"
  python3 "\$SCRIPT_DIR/scan_python_safety.py" --requirements "\$PROJECT_DIR/requirements.txt" --format json --output "\$REPORT_DIR/safety_\$TIMESTAMP.json" 2>&1 | tee -a "\$LOG_FILE"
  
  # Run JavaScript ESLint scan if Node.js is available
  if command -v node >/dev/null 2>&1; then
    echo "Running ESLint security scan..." | tee -a "\$LOG_FILE"
    node "\$SCRIPT_DIR/scan_js_eslint.js" --path "\$PROJECT_DIR/static/js" --format json --output "\$REPORT_DIR/eslint_\$TIMESTAMP.json" 2>&1 | tee -a "\$LOG_FILE"
  fi
  
  # Run OWASP Dependency-Check if it's a weekly scan
  if [ "\$SCAN_TYPE" = "weekly" ]; then
    echo "Running OWASP Dependency-Check scan..." | tee -a "\$LOG_FILE"
    bash "\$SCRIPT_DIR/scan_dependency_check.sh" --path "\$PROJECT_DIR" --format "HTML,JSON" --output "\$REPORT_DIR/dependency-check" --name "CryoProtect-\$TIMESTAMP" 2>&1 | tee -a "\$LOG_FILE"
  fi
  
  # Check for critical vulnerabilities
  CRITICAL_VULNS=false
  
  # Check Bandit results
  if [ -f "\$REPORT_DIR/bandit_\$TIMESTAMP.json" ]; then
    HIGH_COUNT=\$(grep -c "\"issue_severity\": \"HIGH\"" "\$REPORT_DIR/bandit_\$TIMESTAMP.json" || true)
    if [ "\$HIGH_COUNT" -gt 0 ]; then
      CRITICAL_VULNS=true
      echo "Found \$HIGH_COUNT high severity issues in Bandit scan!" | tee -a "\$LOG_FILE"
    fi
  fi
  
  # Check Safety results
  if [ -f "\$REPORT_DIR/safety_\$TIMESTAMP.json" ]; then
    VULN_COUNT=\$(grep -c "\"vulnerability\"" "\$REPORT_DIR/safety_\$TIMESTAMP.json" || true)
    if [ "\$VULN_COUNT" -gt 0 ]; then
      CRITICAL_VULNS=true
      echo "Found \$VULN_COUNT vulnerabilities in Safety scan!" | tee -a "\$LOG_FILE"
    fi
  fi
  
  # Check ESLint results
  if [ -f "\$REPORT_DIR/eslint_\$TIMESTAMP.json" ]; then
    SECURITY_COUNT=\$(grep -c "security/" "\$REPORT_DIR/eslint_\$TIMESTAMP.json" || true)
    if [ "\$SECURITY_COUNT" -gt 0 ]; then
      CRITICAL_VULNS=true
      echo "Found \$SECURITY_COUNT security issues in ESLint scan!" | tee -a "\$LOG_FILE"
    fi
  fi
  
  # Send alert if critical vulnerabilities found
  if [ "\$CRITICAL_VULNS" = true ]; then
    SUBJECT="[SECURITY ALERT] Critical vulnerabilities found in \$SCAN_TYPE scan"
    MESSAGE="Critical vulnerabilities were found in the \$SCAN_TYPE security scan run at \$(date).\n\nPlease check the scan reports in \$REPORT_DIR for details.\n\nScan log: \$LOG_FILE"
    send_alert "\$SUBJECT" "\$MESSAGE"
  else
    echo "No critical vulnerabilities found." | tee -a "\$LOG_FILE"
  fi
  
  echo "\$SCAN_TYPE vulnerability scans completed at \$(date)" | tee -a "\$LOG_FILE"
}

# Determine scan type from arguments
if [ "\$1" = "daily" ]; then
  run_scans "daily"
elif [ "\$1" = "weekly" ]; then
  run_scans "weekly"
else
  run_scans "manual"
fi
EOF
  
  # Make the script executable
  chmod +x "$CRON_SCRIPT"
  
  # Create cron jobs
  if [ "$DAILY_MODE" = true ]; then
    # Schedule daily scan at 2:00 AM
    (crontab -l 2>/dev/null || echo "") | grep -v "$SCRIPT_DIR/run_vulnerability_scans.sh daily" | { cat; echo "0 2 * * * $SCRIPT_DIR/run_vulnerability_scans.sh daily > /dev/null 2>&1"; } | crontab -
    echo "Daily vulnerability scan scheduled at 2:00 AM."
  fi
  
  if [ "$WEEKLY_MODE" = true ]; then
    # Schedule weekly scan on Sunday at 3:00 AM
    (crontab -l 2>/dev/null || echo "") | grep -v "$SCRIPT_DIR/run_vulnerability_scans.sh weekly" | { cat; echo "0 3 * * 0 $SCRIPT_DIR/run_vulnerability_scans.sh weekly > /dev/null 2>&1"; } | crontab -
    echo "Weekly vulnerability scan scheduled on Sunday at 3:00 AM."
  fi
  
  echo "Scheduled vulnerability scans have been set up."
}

# Main execution
if [ "$INSTALL_MODE" = true ]; then
  install_dependencies
  install_cron_jobs
fi

if [ "$RUN_MODE" = true ]; then
  # Run the vulnerability scans now
  if [ -f "$SCRIPT_DIR/run_vulnerability_scans.sh" ]; then
    echo "Running vulnerability scans now..."
    if [ "$WEEKLY_MODE" = true ]; then
      bash "$SCRIPT_DIR/run_vulnerability_scans.sh" weekly
    else
      bash "$SCRIPT_DIR/run_vulnerability_scans.sh" daily
    fi
  else
    echo "Error: run_vulnerability_scans.sh not found. Please run with --install first."
    exit 1
  fi
fi

# If no mode is specified, show help
if [ "$INSTALL_MODE" = false ] && [ "$RUN_MODE" = false ] && [ "$DAILY_MODE" = false ] && [ "$WEEKLY_MODE" = false ]; then
  echo "No action specified. Run './schedule_vulnerability_scans.sh --help' for usage information."
  exit 1
fi

exit 0