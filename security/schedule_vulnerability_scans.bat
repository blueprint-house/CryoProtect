@echo off
REM schedule_vulnerability_scans.bat - Schedule and run vulnerability scans on Windows
REM 
REM This script sets up scheduled vulnerability scans using Windows Task Scheduler
REM and provides a way to run scans on demand.
REM
REM Usage: schedule_vulnerability_scans.bat [options]
REM
REM Options:
REM   --install             Install and configure scheduled scans
REM   --run                 Run all vulnerability scans now
REM   --daily               Run daily scans
REM   --weekly              Run weekly scans
REM   --alert-email EMAIL   Email address for alerts
REM   --help                Show this help message and exit

setlocal enabledelayedexpansion

REM Default values
set INSTALL_MODE=0
set RUN_MODE=0
set DAILY_MODE=0
set WEEKLY_MODE=0
set ALERT_EMAIL=
set SCRIPT_DIR=%~dp0
set PROJECT_DIR=%SCRIPT_DIR%..
set REPORT_DIR=%PROJECT_DIR%\security\reports
set LOG_DIR=%PROJECT_DIR%\security\logs

REM Parse arguments
:parse_args
if "%~1"=="" goto :end_parse_args
if "%~1"=="--install" (
    set INSTALL_MODE=1
    shift
    goto :parse_args
)
if "%~1"=="--run" (
    set RUN_MODE=1
    shift
    goto :parse_args
)
if "%~1"=="--daily" (
    set DAILY_MODE=1
    shift
    goto :parse_args
)
if "%~1"=="--weekly" (
    set WEEKLY_MODE=1
    shift
    goto :parse_args
)
if "%~1"=="--alert-email" (
    set ALERT_EMAIL=%~2
    shift
    shift
    goto :parse_args
)
if "%~1"=="--help" (
    echo Usage: schedule_vulnerability_scans.bat [options]
    echo.
    echo Options:
    echo   --install             Install and configure scheduled scans
    echo   --run                 Run all vulnerability scans now
    echo   --daily               Run daily scans
    echo   --weekly              Run weekly scans
    echo   --alert-email EMAIL   Email address for alerts
    echo   --help                Show this help message and exit
    exit /b 0
)
echo Unknown option: %~1
echo Run 'schedule_vulnerability_scans.bat --help' for usage information
exit /b 1

:end_parse_args

REM Create directories if they don't exist
if not exist "%REPORT_DIR%" mkdir "%REPORT_DIR%"
if not exist "%LOG_DIR%" mkdir "%LOG_DIR%"

REM Function to check if a command exists
:command_exists
where %~1 >nul 2>nul
exit /b %ERRORLEVEL%

REM Function to install dependencies
:install_dependencies
echo Checking and installing dependencies...

REM Check for Python
call :command_exists python
if %ERRORLEVEL% neq 0 (
    echo Python is required but not installed. Please install Python 3.
    exit /b 1
)

REM Check for pip and install if needed
call :command_exists pip
if %ERRORLEVEL% neq 0 (
    echo Installing pip...
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python get-pip.py
    del get-pip.py
)

REM Install Python dependencies
echo Installing Python security tools...
pip install bandit safety

REM Check for Node.js and npm
call :command_exists node
if %ERRORLEVEL% equ 0 (
    call :command_exists npm
    if %ERRORLEVEL% equ 0 (
        echo Installing Node.js security tools...
        npm install --save-dev eslint eslint-plugin-security eslint-plugin-no-unsanitized
    ) else (
        echo npm is not installed. JavaScript security scanning will be skipped.
    )
) else (
    echo Node.js is not installed. JavaScript security scanning will be skipped.
)

REM Check for Docker (for OWASP Dependency-Check)
call :command_exists docker
if %ERRORLEVEL% neq 0 (
    echo Docker is not installed. OWASP Dependency-Check will use local installation if available.
)

echo Dependencies installation completed.
exit /b 0

REM Function to install scheduled tasks
:install_scheduled_tasks
echo Setting up scheduled vulnerability scans...

REM Create the task XML files
if %DAILY_MODE% equ 1 (
    REM Create daily scan task XML
    set "DAILY_TASK_XML=%TEMP%\daily_vulnerability_scan.xml"
    echo ^<?xml version="1.0" encoding="UTF-16"?^> > "%DAILY_TASK_XML%"
    echo ^<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"^> >> "%DAILY_TASK_XML%"
    echo   ^<RegistrationInfo^> >> "%DAILY_TASK_XML%"
    echo     ^<Description^>Daily vulnerability scan for CryoProtect v2^</Description^> >> "%DAILY_TASK_XML%"
    echo   ^</RegistrationInfo^> >> "%DAILY_TASK_XML%"
    echo   ^<Triggers^> >> "%DAILY_TASK_XML%"
    echo     ^<CalendarTrigger^> >> "%DAILY_TASK_XML%"
    echo       ^<StartBoundary^>2025-04-26T02:00:00^</StartBoundary^> >> "%DAILY_TASK_XML%"
    echo       ^<Enabled^>true^</Enabled^> >> "%DAILY_TASK_XML%"
    echo       ^<ScheduleByDay^> >> "%DAILY_TASK_XML%"
    echo         ^<DaysInterval^>1^</DaysInterval^> >> "%DAILY_TASK_XML%"
    echo       ^</ScheduleByDay^> >> "%DAILY_TASK_XML%"
    echo     ^</CalendarTrigger^> >> "%DAILY_TASK_XML%"
    echo   ^</Triggers^> >> "%DAILY_TASK_XML%"
    echo   ^<Principals^> >> "%DAILY_TASK_XML%"
    echo     ^<Principal id="Author"^> >> "%DAILY_TASK_XML%"
    echo       ^<LogonType^>InteractiveToken^</LogonType^> >> "%DAILY_TASK_XML%"
    echo       ^<RunLevel^>LeastPrivilege^</RunLevel^> >> "%DAILY_TASK_XML%"
    echo     ^</Principal^> >> "%DAILY_TASK_XML%"
    echo   ^</Principals^> >> "%DAILY_TASK_XML%"
    echo   ^<Settings^> >> "%DAILY_TASK_XML%"
    echo     ^<MultipleInstancesPolicy^>IgnoreNew^</MultipleInstancesPolicy^> >> "%DAILY_TASK_XML%"
    echo     ^<DisallowStartIfOnBatteries^>false^</DisallowStartIfOnBatteries^> >> "%DAILY_TASK_XML%"
    echo     ^<StopIfGoingOnBatteries^>false^</StopIfGoingOnBatteries^> >> "%DAILY_TASK_XML%"
    echo     ^<AllowHardTerminate^>true^</AllowHardTerminate^> >> "%DAILY_TASK_XML%"
    echo     ^<StartWhenAvailable^>true^</StartWhenAvailable^> >> "%DAILY_TASK_XML%"
    echo     ^<RunOnlyIfNetworkAvailable^>false^</RunOnlyIfNetworkAvailable^> >> "%DAILY_TASK_XML%"
    echo     ^<IdleSettings^> >> "%DAILY_TASK_XML%"
    echo       ^<StopOnIdleEnd^>true^</StopOnIdleEnd^> >> "%DAILY_TASK_XML%"
    echo       ^<RestartOnIdle^>false^</RestartOnIdle^> >> "%DAILY_TASK_XML%"
    echo     ^</IdleSettings^> >> "%DAILY_TASK_XML%"
    echo     ^<AllowStartOnDemand^>true^</AllowStartOnDemand^> >> "%DAILY_TASK_XML%"
    echo     ^<Enabled^>true^</Enabled^> >> "%DAILY_TASK_XML%"
    echo     ^<Hidden^>false^</Hidden^> >> "%DAILY_TASK_XML%"
    echo     ^<RunOnlyIfIdle^>false^</RunOnlyIfIdle^> >> "%DAILY_TASK_XML%"
    echo     ^<WakeToRun^>false^</WakeToRun^> >> "%DAILY_TASK_XML%"
    echo     ^<ExecutionTimeLimit^>PT2H^</ExecutionTimeLimit^> >> "%DAILY_TASK_XML%"
    echo     ^<Priority^>7^</Priority^> >> "%DAILY_TASK_XML%"
    echo   ^</Settings^> >> "%DAILY_TASK_XML%"
    echo   ^<Actions Context="Author"^> >> "%DAILY_TASK_XML%"
    echo     ^<Exec^> >> "%DAILY_TASK_XML%"
    echo       ^<Command^>%SCRIPT_DIR%run_vulnerability_scans.bat^</Command^> >> "%DAILY_TASK_XML%"
    echo       ^<Arguments^>daily^</Arguments^> >> "%DAILY_TASK_XML%"
    echo       ^<WorkingDirectory^>%PROJECT_DIR%^</WorkingDirectory^> >> "%DAILY_TASK_XML%"
    echo     ^</Exec^> >> "%DAILY_TASK_XML%"
    echo   ^</Actions^> >> "%DAILY_TASK_XML%"
    echo ^</Task^> >> "%DAILY_TASK_XML%"
    
    REM Create the scheduled task
    schtasks /Create /TN "CryoProtect\DailyVulnerabilityScan" /XML "%DAILY_TASK_XML%" /F
    echo Daily vulnerability scan scheduled at 2:00 AM.
    del "%DAILY_TASK_XML%"
)

if %WEEKLY_MODE% equ 1 (
    REM Create weekly scan task XML
    set "WEEKLY_TASK_XML=%TEMP%\weekly_vulnerability_scan.xml"
    echo ^<?xml version="1.0" encoding="UTF-16"?^> > "%WEEKLY_TASK_XML%"
    echo ^<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"^> >> "%WEEKLY_TASK_XML%"
    echo   ^<RegistrationInfo^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Description^>Weekly vulnerability scan for CryoProtect v2^</Description^> >> "%WEEKLY_TASK_XML%"
    echo   ^</RegistrationInfo^> >> "%WEEKLY_TASK_XML%"
    echo   ^<Triggers^> >> "%WEEKLY_TASK_XML%"
    echo     ^<CalendarTrigger^> >> "%WEEKLY_TASK_XML%"
    echo       ^<StartBoundary^>2025-04-26T03:00:00^</StartBoundary^> >> "%WEEKLY_TASK_XML%"
    echo       ^<Enabled^>true^</Enabled^> >> "%WEEKLY_TASK_XML%"
    echo       ^<ScheduleByWeek^> >> "%WEEKLY_TASK_XML%"
    echo         ^<DaysOfWeek^> >> "%WEEKLY_TASK_XML%"
    echo           ^<Sunday/^> >> "%WEEKLY_TASK_XML%"
    echo         ^</DaysOfWeek^> >> "%WEEKLY_TASK_XML%"
    echo         ^<WeeksInterval^>1^</WeeksInterval^> >> "%WEEKLY_TASK_XML%"
    echo       ^</ScheduleByWeek^> >> "%WEEKLY_TASK_XML%"
    echo     ^</CalendarTrigger^> >> "%WEEKLY_TASK_XML%"
    echo   ^</Triggers^> >> "%WEEKLY_TASK_XML%"
    echo   ^<Principals^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Principal id="Author"^> >> "%WEEKLY_TASK_XML%"
    echo       ^<LogonType^>InteractiveToken^</LogonType^> >> "%WEEKLY_TASK_XML%"
    echo       ^<RunLevel^>LeastPrivilege^</RunLevel^> >> "%WEEKLY_TASK_XML%"
    echo     ^</Principal^> >> "%WEEKLY_TASK_XML%"
    echo   ^</Principals^> >> "%WEEKLY_TASK_XML%"
    echo   ^<Settings^> >> "%WEEKLY_TASK_XML%"
    echo     ^<MultipleInstancesPolicy^>IgnoreNew^</MultipleInstancesPolicy^> >> "%WEEKLY_TASK_XML%"
    echo     ^<DisallowStartIfOnBatteries^>false^</DisallowStartIfOnBatteries^> >> "%WEEKLY_TASK_XML%"
    echo     ^<StopIfGoingOnBatteries^>false^</StopIfGoingOnBatteries^> >> "%WEEKLY_TASK_XML%"
    echo     ^<AllowHardTerminate^>true^</AllowHardTerminate^> >> "%WEEKLY_TASK_XML%"
    echo     ^<StartWhenAvailable^>true^</StartWhenAvailable^> >> "%WEEKLY_TASK_XML%"
    echo     ^<RunOnlyIfNetworkAvailable^>false^</RunOnlyIfNetworkAvailable^> >> "%WEEKLY_TASK_XML%"
    echo     ^<IdleSettings^> >> "%WEEKLY_TASK_XML%"
    echo       ^<StopOnIdleEnd^>true^</StopOnIdleEnd^> >> "%WEEKLY_TASK_XML%"
    echo       ^<RestartOnIdle^>false^</RestartOnIdle^> >> "%WEEKLY_TASK_XML%"
    echo     ^</IdleSettings^> >> "%WEEKLY_TASK_XML%"
    echo     ^<AllowStartOnDemand^>true^</AllowStartOnDemand^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Enabled^>true^</Enabled^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Hidden^>false^</Hidden^> >> "%WEEKLY_TASK_XML%"
    echo     ^<RunOnlyIfIdle^>false^</RunOnlyIfIdle^> >> "%WEEKLY_TASK_XML%"
    echo     ^<WakeToRun^>false^</WakeToRun^> >> "%WEEKLY_TASK_XML%"
    echo     ^<ExecutionTimeLimit^>PT4H^</ExecutionTimeLimit^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Priority^>7^</Priority^> >> "%WEEKLY_TASK_XML%"
    echo   ^</Settings^> >> "%WEEKLY_TASK_XML%"
    echo   ^<Actions Context="Author"^> >> "%WEEKLY_TASK_XML%"
    echo     ^<Exec^> >> "%WEEKLY_TASK_XML%"
    echo       ^<Command^>%SCRIPT_DIR%run_vulnerability_scans.bat^</Command^> >> "%WEEKLY_TASK_XML%"
    echo       ^<Arguments^>weekly^</Arguments^> >> "%WEEKLY_TASK_XML%"
    echo       ^<WorkingDirectory^>%PROJECT_DIR%^</WorkingDirectory^> >> "%WEEKLY_TASK_XML%"
    echo     ^</Exec^> >> "%WEEKLY_TASK_XML%"
    echo   ^</Actions^> >> "%WEEKLY_TASK_XML%"
    echo ^</Task^> >> "%WEEKLY_TASK_XML%"
    
    REM Create the scheduled task
    schtasks /Create /TN "CryoProtect\WeeklyVulnerabilityScan" /XML "%WEEKLY_TASK_XML%" /F
    echo Weekly vulnerability scan scheduled on Sunday at 3:00 AM.
    del "%WEEKLY_TASK_XML%"
)

echo Scheduled vulnerability scans have been set up.
exit /b 0

REM Main execution
if %INSTALL_MODE% equ 1 (
    call :install_dependencies
    call :install_scheduled_tasks
)

if %RUN_MODE% equ 1 (
    REM Run the vulnerability scans now
    if exist "%SCRIPT_DIR%run_vulnerability_scans.bat" (
        echo Running vulnerability scans now...
        if %WEEKLY_MODE% equ 1 (
            call "%SCRIPT_DIR%run_vulnerability_scans.bat" weekly
        ) else (
            call "%SCRIPT_DIR%run_vulnerability_scans.bat" daily
        )
    ) else (
        echo Error: run_vulnerability_scans.bat not found. Please run with --install first.
        exit /b 1
    )
)

REM If no mode is specified, show help
if %INSTALL_MODE% equ 0 if %RUN_MODE% equ 0 if %DAILY_MODE% equ 0 if %WEEKLY_MODE% equ 0 (
    echo No action specified. Run 'schedule_vulnerability_scans.bat --help' for usage information.
    exit /b 1
)

exit /b 0